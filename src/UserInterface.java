import java.util.*;
import java.util.concurrent.TimeUnit;

//import org.openqa.selenium.By;
//import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebElement;
//import org.openqa.selenium.chrome.ChromeDriver;
//import org.testng.Assert;
//import org.testng.annotations.Test;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.*;
import java.awt.*;

import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.SwingUtilities;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLHandshakeException;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;


public class UserInterface {
	static JFrame frame = new JFrame("Web App Vulnerability Scanner");
	static JFrame userOptionsFrame = new JFrame("User Options");
	static JFrame optionsFrame = new JFrame("Scanning Options");
	static JFrame securityFrame = new JFrame ("Security of the Site");
	static JPanel options, userOptions;
	static JFrame ownerUI = new JFrame("XSS Scripting");
	static String url;
	static String xssField;
	static String printedOut;


	@SuppressWarnings("deprecation")
	public static void main(String[] args) {
		//Webdriver driver = new ChromeDriver();
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(400, 600);

		frame.setLayout(null);

		JLabel intro = new JLabel("<html><span style='font-size:30px'>"+"I am the..."+"</span></html>");
		intro.setLocation(125, 50);
		intro.setSize(200, 200);
		frame.add(intro);

		JButton owner = new JButton("<html><span style='font-size:20px'>"+"Owner of the Site"+"</span></html>");
		owner.setLocation(50, 250);
		owner.setLayout(new GridLayout(0, 5));
		owner.setSize(300, 100);
		owner.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {
				options();

			}
		});

		JButton user = new JButton("<html><span style='font-size:20px'>"+"User of the Site"+"</span></html>");
		user.setLocation(50, 400);
		user.setLayout(new GridLayout(0, 5));
		user.setSize(300, 100);
		user.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {
				userOptions();

			}
		});



		frame.add(user);
		frame.add(owner);


		frame.setVisible(true);
	}

	public static void userOptions() {
		frame.setVisible(false);




		JButton malware, security, back;
		malware = new JButton("<html><span style='font-size:40px'>Malware</span></html>");
		security = new JButton("<html><span style='font-size:40px'>Security</span></html>");
		back = new JButton("<html><span style='font-size:40px'>Back</span></html>");

		userOptions = new JPanel(new GridLayout(2, 1));
		userOptions.setSize(400, 100);


		//userOptions.add(malware);
		userOptions.add(security);
		userOptions.add(back);

		malware.setVisible(false);


		back.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				userOptionsFrame.setVisible(false);
				frame.setVisible(true);

			}
		});

		security.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				userOptionsFrame.setVisible(false);
				security();

			}
		});

		userOptionsFrame.add(userOptions);

		userOptionsFrame.setSize(400, 600);
		userOptionsFrame.setVisible(true);



	}


	public static void security() {

		
		JLabel completeURL = new JLabel("Complete URL: ");
		JTextField inputURL = new JTextField();
		JPanel combine = new JPanel(new GridLayout(1, 2));
		combine.add(completeURL);
		combine.add(inputURL);
		
		JPanel buffer = new JPanel();
		buffer.setSize(400, 400);
		
		JButton scan1 = new JButton("Scan");
		JButton back = new JButton("Back");
		JPanel second = new JPanel(new GridLayout(2, 1));
		second.add(scan1);
		second.add(back);
		
		JPanel third = new JPanel(new GridLayout(4, 1));
		third.add(combine);
		//third.add(buffer);
		third.add(second);

		
		securityFrame.setSize(800, 600);

		back.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				securityFrame.setVisible(false);
				frame.setVisible(true);

			}
		});


		JLabel isSecure = new JLabel("The website is secure because the https protocol uses SSL to encrypt data transferred between the browser and the user. ");
		third.add(isSecure);
		//third.add(secureAdd);
		isSecure.setVisible(false);
		//secureAdd.setVisible(false);

		JLabel isNotSecure = new JLabel("The website is not secure because the http protocol doesn't use SSL to encrypt data transferred between the client and the server");
		third.add(isNotSecure);
		//third.add(notAdd);
		//notAdd.setVisible(false);
		isNotSecure.setVisible(false);

		scan1.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {
				boolean labelExists;


				if(inputURL.getText().contains("https") && inputURL.getText().contains(".")) {
					third.remove(isNotSecure);
					third.remove(isSecure);
					third.add(isSecure);
					//third.add(secureAdd);
					isSecure.setVisible(true);
					//secureAdd.setVisible(true);
				}else {

					third.remove(isNotSecure);
					third.remove(isSecure);
					third.add(isNotSecure);
					//third.add(secureAdd);
					isNotSecure.setVisible(true);
					//secureAdd.setVisible(true);
				}

			}
		});



		securityFrame.add(third);
		securityFrame.setVisible(true);

	}



	public static void options() {

		frame.setVisible(false);


		JButton sqli, xss, dos, back, malware;
		sqli = new JButton("SQL Injection");
		malware = new JButton("Malicious Input Check");
		xss = new JButton("XSS Scripting");
		dos = new JButton("Denial Of Service");
		back = new JButton("Back");

		options = new JPanel(new GridLayout(5, 1));
		options.setSize(400, 100);


		options.add(sqli);
		options.add(xss);
		options.add(dos);
		options.add(malware);
		options.add(back);
		
		
			//interview on december 12th @ 8:00 am critical start
		xss.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				owner();

			}
		});
		
		dos.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("hi");
				optionsFrame.setVisible(false);
				dosP();

			}
		});
		
		malware.addActionListener( new ActionListener()

		{

			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("");
				malwareCheck();

			}
		});
		
		
		back.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				optionsFrame.setVisible(false);
				frame.setVisible(true);

			}
		});
		
		sqli.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				sqlInjection();

			}
		});
		


		optionsFrame.setSize(600, 600);
		optionsFrame.setVisible(true);
		optionsFrame.add(options, BorderLayout.CENTER);
	}
	
	static JFrame sqli = new JFrame("SQL Injection");
	public static void sqlInjection(){
		optionsFrame.setVisible(false);
		JLabel intro = new JLabel("Use these instructions to test if your site is vulnerable to SQL Injections");
		JLabel instruction1 = new JLabel("1) Fill in the username you would like to test it on");
		JLabel instruction2 = new JLabel("2) Enter this in the password field: name' OR 'a'='a ");
		JLabel instruction3 = new JLabel("3) If you are able to log in, the site is vulnerable to SQL injection");
		
		JPanel first = new JPanel(new GridLayout(5, 1));
		first.add(intro);
		first.add(instruction1);
		first.add(instruction2);
		first.add(instruction3);
		
		
		
		JButton back = new JButton ("Back");
		first.add(back);
		
		sqli.add(first);
		sqli.setVisible(true);
		sqli.setSize(600, 400);
		back.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				sqli.setVisible(false);
				optionsFrame.setVisible(true);

			}
		});
	}
	
	static JFrame dosq = new JFrame("Denial-Of-Service Questions");
	public static void dosP() {
	
		
		
		JPanel everything = new JPanel(new GridLayout(6, 1));
		
		JLabel intro = new JLabel("General Questions to possible determine if you are vulnerable to Denial-Of-Service Attacks");
		
		
		JPanel two = new JPanel(new GridLayout(1, 2));
		JLabel question1 = new JLabel("Are you using a massivley scaleable cloud architecture or content delivery network?");
		
		JPanel yn = new JPanel(new GridLayout(2, 1));
		JRadioButton yes = new JRadioButton("YES");
		JRadioButton no = new JRadioButton("NO");
		ButtonGroup bg1 = new ButtonGroup();
		bg1.add(yes);
		bg1.add(no);
		yn.add(yes);
		yn.add(no);
		two.add(question1);
		two.add(yn);
		
		
		
		JPanel three = new JPanel(new GridLayout(1,2));
		JLabel question2 = new JLabel("Is your ISP active in using DOS/DDOS mitigation for hosted servers?");
		three.add(question2);
		JPanel r = new JPanel(new GridLayout(2, 1));
		JRadioButton yes1 = new JRadioButton("YES");
		JRadioButton no11 = new JRadioButton("NO");
		ButtonGroup bg2 = new ButtonGroup();
		bg2.add(yes1);
		bg2.add(no11);
		r.add(yes1);
		r.add(no11);
		three.add(r);
		
		
		
		
		
		JPanel buttons = new JPanel(new GridLayout(1, 2));
		JButton answer = new JButton("Answer");
		JButton no1 = new JButton("Back");
		
		buttons.add(answer);
		buttons.add(no1);
		
		
		JLabel vulS = new JLabel("Your site may be vulnerable to Denial of Service attacks");
		JLabel notV = new JLabel("Your site may not be vulnerable to Denial of Service attacks");
		
		
		
		
		no1.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				dosq.setVisible(false);
				optionsFrame.setVisible(true);

			}
		});
		
		answer.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
					//System.out.println("working");
				if(no11.isSelected() || no.isSelected()) {
					System.out.println("is selected");
					everything.remove(notV);
					everything.remove(vulS);
					everything.add(vulS);
					vulS.setVisible(true);
					
				}else {
					everything.remove(notV);
					everything.remove(vulS);
					everything.add(notV);
					notV.setVisible(true);
					vulS.setVisible(false);
					
				}

			}
		}
				
				
				);
		
		
		
		everything.add(intro);
		everything.add(two);
		everything.add(three);
		everything.add(buttons);
		
		everything.add(vulS);
		everything.add(notV);
		
		vulS.setVisible(false);
		notV.setVisible(false);
		
		
		
		
		
		
		dosq.add(everything);
		dosq.setSize(900, 400);
		dosq.setVisible(true);
		
		
		
		dosq.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		
		
		
		
		
		
	}

	static JFrame MalwareCheck = new JFrame("Check Program for Malicious Changes");
	public static void malwareCheck() {

		optionsFrame.setVisible(false);

		JLabel intro = new JLabel("Compare your latest backup of your program or database with the files in order to detect potential malware or hidden changes");



		JPanel latestBackupField = new JPanel(new GridLayout(1, 2));
		JLabel latestBackup = new JLabel("                                                     Latest Backup of your Program: ");
		JTextArea backupField = new JTextArea();
		latestBackupField.add(latestBackup);
		latestBackupField.add(backupField);

		JPanel currentCode = new JPanel(new GridLayout(1, 2));
		JLabel current = new JLabel("                                                           Current Runnable Program: ");
		JTextArea code = new JTextArea();
		currentCode.add(current);
		currentCode.add(code);

		JPanel buffer = new JPanel();
		buffer.setSize(400, 400);

		JPanel smallerBuffer = new JPanel();
		smallerBuffer.setSize(10, 10);

		JButton compare = new JButton("Compare");

		JButton back = new JButton("Back");

		JLabel noneFound = new JLabel("No Changes Found! There were no alterations between these two versions");

		JLabel changesFound = new JLabel(" changes were found. Action should be taken to review these changes ");

		JPanel everything = new JPanel(new GridLayout(9, 1));

		everything.add(intro);
		everything.add(latestBackupField);
		everything.add(buffer);
		everything.add(currentCode);
		everything.add(smallerBuffer);
		everything.add(compare);
		everything.add(back);


		everything.add(noneFound);
		everything.add(changesFound);

		noneFound.setVisible(false);
		changesFound.setVisible(false);

		compare.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				char [] back = backupField.getText().toCharArray();
				char [] curr = code.getText().toCharArray();

				int changes = 0;
				try {
					for(int i = 0 ; i < curr.length; i++) {
						if(curr[i] != back[i]) {
							changes++;
						}
					}
				}catch (ArrayIndexOutOfBoundsException VariableDeclaratorId) {
					changes = Math.abs(curr.length - back.length);
				}

				if(changes > 0) {
					changesFound.setVisible(false);
					noneFound.setVisible(false);
					everything.remove(noneFound);
					everything.remove(changesFound);
					changesFound.setText(Integer.toString(changes) + " changes were found. Action should be taken to review these changes");

					everything.add(changesFound);
					changesFound.setVisible(true);

				}else {
					changesFound.setVisible(false);
					noneFound.setVisible(false);
					everything.remove(changesFound);
					everything.remove(noneFound);
					everything.add(noneFound);
					noneFound.setVisible(true);

				}


			}
		});

		back.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {

				optionsFrame.setVisible(true);
				MalwareCheck.setVisible(false);

			}
		});

		MalwareCheck.setSize(800, 800);
		MalwareCheck.add(everything);
		MalwareCheck.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		MalwareCheck.setLocationRelativeTo(null);		
		MalwareCheck.setVisible(true);

	}
	public static void owner() {


		optionsFrame.setVisible(false);



		ownerUI.setSize(400, 100);
		ownerUI.setVisible(true);

		

		
		JPanel panel;
		JLabel URL, password_label, third;
		JTextField userName_text;
		JTextField password_text;

		JTextField third_text;
		JButton scan;
		
		JLabel intro = new JLabel("Fill this out to see if your website is vulnerable to xss scripting");

		
		URL = new JLabel();
		URL.setText("Webpage URL :");
		userName_text = new JTextField();
		
		JPanel second = new JPanel(new GridLayout(1, 2));
		second.add(URL);
		second.add(userName_text);

		// Password Label

		password_label = new JLabel();
		password_label.setText("Input Field Attack Vector:");
		password_text = new JTextField();

		third = new JLabel();
		third.setText("URL-visible Text Field name :");
		third_text = new JTextField();
		
		JPanel thirdIn = new JPanel(new GridLayout(1, 2));
		thirdIn.add(password_label);
		thirdIn.add(password_text);
		
		JPanel fourth = new JPanel(new GridLayout(1, 2));
		fourth.add(third);
		fourth.add(third_text);

		// Submit

		scan = new JButton("Scan");
		
		JButton back = new JButton("Back");

		JPanel buttons = new JPanel(new GridLayout(1, 2));
		buttons.add(back);
		buttons.add(scan);
		
		panel = new JPanel(new GridLayout(7, 1));

		

		panel.add(intro);
		panel.add(second);
		panel.add(thirdIn);
		panel.add(fourth);
		panel.add(buttons);
		
		JLabel vulnerable = new JLabel("Your site is vulnerable to XSS scripting");
		panel.add(vulnerable);
		vulnerable.setVisible(false);
		
		JLabel notVulnerable = new JLabel("With the given inputs, there is no XSS vulnerability");
		panel.add(notVulnerable);
		notVulnerable.setVisible(false);
		
		back.setVisible(true);

		
		

		scan.addActionListener( new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e) {
				url = userName_text.getText();
				String later = url;
				xssField = password_text.getText();
				printedOut = third_text.getText();


				ownerUI.setVisible(false);
				String addition = "<script>window.onload=function() {document.getElementsByName('";
				String addition2 = "')[0].innerHTML='Web Vulnerability Scanner Alert: Vulnerable to XSS Scripting';document.getElementById('post').submit();}</script>";
				System.out.println(url + "?" + xssField + "=" + addition+printedOut+addition2);
				String real ="http://"+ url + "?" + xssField + "=" + addition+printedOut+addition2;
				Desktop d = Desktop.getDesktop();
				String name = addition+printedOut+addition2;
				
				try {
					url = "https://" + url + "?" + xssField + "=" + URLEncoder.encode(name,"UTF-8");
				} catch (UnsupportedEncodingException e3) {
					// TODO Auto-generated catch block
					e3.printStackTrace();
				}
				
				
				
				System.out.println(url);
				try {
					d.browse(new URI(url));
				} catch (IOException e2) {
					// TODO Auto-generated catch block
					System.out.println("CAUGHT");
					ownerUI.setVisible(true);
					e2.printStackTrace();
					ownerUI.setVisible(true);
					
				} catch (URISyntaxException e2) {
					ownerUI.setVisible(true);
					e2.printStackTrace();	
					ownerUI.setVisible(true);
				}
				
				try {
					BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
				} catch (IOException e2) {
					System.out.println("CAUGHT");
					e2.printStackTrace();
				} 
				

			for(int i = 0; i < 2; i++) {
					try {
						System.out.println("http://"+later);
						if(WebTest.getHTMLS(later).contains("Vulnerability Scanner Alert: Vulnerable to XSS")) {
							System.out.println("working good");
							ownerUI.setVisible(true);
							panel.remove(vulnerable);
							panel.remove(notVulnerable);
							panel.add(vulnerable);
							vulnerable.setVisible(true);
							
						}else {
							ownerUI.setVisible(true);
							System.out.println("working bad");
							panel.remove(notVulnerable);
							panel.remove(vulnerable);
							panel.add(notVulnerable);
							notVulnerable.setVisible(true);
							vulnerable.setVisible(false);
						}
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
			}
				
				
			}	
		});
		
		back.addActionListener(new ActionListener() {
			
			
			@Override
			public void actionPerformed(ActionEvent e) {
				ownerUI.setVisible(false);
				optionsFrame.setVisible(true);
			}
		});



		ownerUI.add(panel);





		ownerUI.setSize(400, 600);		
		ownerUI.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ownerUI.setLocationRelativeTo(null);		
		ownerUI.setVisible(true);
		
		



	}

	


	//localhost/version1/comments.php?name=<script>window.onload=function() {document.getElementsByName('comment')[0].innerHTML='XSS is fun!';document.getElementById('post').submit();}</script>


}
